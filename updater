# ==============================
# Auto-Updater (Checks GitHub)
# ==============================
$localScriptPath = $MyInvocation.MyCommand.Path
$repoUrl = "https://raw.githubusercontent.com/redivancee/private-securehide/refs/heads/main/updater"
$localVersion = "1.01"  # Update this when uploading new versions

try {
    $remoteScript = Invoke-WebRequest -Uri $repoUrl -UseBasicParsing -ErrorAction Stop
    if ($remoteScript.Content -match "# Version: (\d+\.\d+)") {
        $remoteVersion = $matches[1]
        if ([double]$remoteVersion -gt [double]$localVersion) {
            Write-Host "[UPDATE] üü¢ New version found! Updating to v$remoteVersion..." -ForegroundColor Green
            $remoteScript.Content | Set-Content -Path $localScriptPath -Encoding UTF8
            Start-Process -FilePath "powershell.exe" -ArgumentList "-File `"$localScriptPath`"" -NoNewWindow
            exit
        }
        else {
            Write-Host "[INFO] üîµ No updates available. Running script..." -ForegroundColor Cyan
        }
    }
} catch {
    Write-Host "[WARNING] ‚ö†Ô∏è Could not check for updates. Running offline mode..." -ForegroundColor Yellow
}
Clear-Host

# ================================================================
# Banner & Credits Section (Purple Theme)
# ================================================================
$banner = @"
 ________  ___  ___          ________  ________  ___  ___      ___ ________  _________  _______      
|\   ____\|\  \|\  \        |\   __  \|\   __  \|\  \|\  \    /  /|\   __  \|\___   ___\\  ___ \     
\ \  \___|\ \  \\\  \       \ \  \|\  \ \  \|\  \ \  \ \  \  /  / | \  \|\  \|___ \  \_\ \   __/|    
 \ \_____  \ \   __  \       \ \   ____\ \   _  _\ \  \ \  \/  / / \ \   __  \   \ \  \ \ \  \_|/__  
  \|____|\  \ \  \ \  \       \ \  \___|\ \  \\  \\ \  \ \    / /   \ \  \ \  \   \ \  \ \ \  \_|\ \ 
    ____\_\  \ \__\ \__\       \ \__\    \ \__\\ _\\ \__\ \__/ /     \ \__\ \__\   \ \__\ \ \_______\
   |\_________\|__|\|__|        \|__|     \|__|\|__|\|__|\|__|/       \|__|\|__|    \|__|  \|_______|
   \|_________|                                                                                        
"@
Write-Host $banner -ForegroundColor Magenta
Write-Host "`nCredits: üü£ redivance, sev, gpt (for syntax)" -ForegroundColor Cyan
Start-Sleep -Seconds 4

# ================================================================
# Theme Setup Function (Purple Theme)
# ================================================================
function Set-Theme {
    Write-Host "[THEME] Setting theme to Purple..." -ForegroundColor Magenta
    Start-Sleep -Seconds 1
    Write-Host "[THEME] Purple theme activated!" -ForegroundColor Magenta
}
Set-Theme

# ================================================================
# HWID & Private Key Verification
# ================================================================
# Retrieves the system's HWID (UUID)
function Get-HWID {
    return (Get-WmiObject -Class Win32_ComputerSystemProduct).UUID
}

# Whitelist JSON URL (keys and associated HWIDs)
$whitelistUrl = "https://raw.githubusercontent.com/redivancee/private-securehide/refs/heads/main/whitelist"

function Get-ValidKeysAndHWIDs {
    try {
        $jsonContent = Invoke-WebRequest -Uri $whitelistUrl -UseBasicParsing -ErrorAction Stop
        $parsedJson = $jsonContent.Content | ConvertFrom-Json
        return $parsedJson
    }
    catch {
        Write-Host "[ERROR] ‚ùå Unable to retrieve or parse whitelist JSON." -ForegroundColor Red
        exit
    }
}

function Verify-Access {
    $userHwid = Get-HWID
    Write-Host "[INFO] üîç Your HWID is: $userHwid" -ForegroundColor Cyan

    $validData = Get-ValidKeysAndHWIDs

    $userKey = Read-Host "[KEY] üîë Enter your private key:"
    $matchingHwid = $null
    foreach ($prop in $validData.PSObject.Properties) {
        if ($prop.Name -eq $userKey) {
            $matchingHwid = $prop.Value
            break
        }
    }
    if ($matchingHwid -eq $null) {
        Write-Host "[ERROR] ‚ùå Invalid private key. Exiting..." -ForegroundColor Magenta
        Start-Sleep -Seconds 3600
        exit
    }
    Write-Host "[ACCESS] ‚úÖ Private key verified." -ForegroundColor Green

    if ($userHwid -eq $matchingHwid) {
        Write-Host "[ACCESS] ‚úÖ HWID verified." -ForegroundColor Green
    }
    else {
        Write-Host "[ERROR] ‚ùå HWID does not match for the provided key. Exiting..." -ForegroundColor Red
        Start-Sleep -Seconds 3600
        exit
    }
}
Verify-Access

# ================================================================
# Silent Mode & Key Press Prompt for Toggling Modifications
# ================================================================
$silentMode = Read-Host "Run in silent mode? (y/n)"
$keyToToggle = Read-Host "Enter the key to toggle modifications (default is 't')"
if ([string]::IsNullOrWhiteSpace($keyToToggle)) { $keyToToggle = "t" }
if ($silentMode -eq "y") {
    Add-Type @"
using System;
using System.Runtime.InteropServices;
public class Win32 {
    [DllImport("user32.dll")]
    public static extern bool ShowWindowAsync(IntPtr hWnd, int nCmdShow);
}
"@
    function Hide-ConsoleWindow {
        $hwnd = (Get-Process -Id $PID).MainWindowHandle
        [Win32]::ShowWindowAsync($hwnd, 0) | Out-Null
    }
    $permission = Read-Host "Do you permit this script to run in background (even if closed)? (y/n)"
    if ($permission -ne "y") {
        Write-Host "[INFO] ‚ùå Permission denied. Exiting..." -ForegroundColor Red
        exit
    }
    Hide-ConsoleWindow
}
Write-Host "[INFO] üîµ Credits: redivance" -ForegroundColor Cyan

# ================================================================
# Folder Operations & Path Prompts
# ================================================================
$defaultOriginalPath = "C:\Users\YourUser\Downloads\uwuvaka"
$defaultMoveToPath = "C:\Users"

$currentPolicy = Get-ExecutionPolicy -Scope CurrentUser
if ($currentPolicy -notin @("RemoteSigned", "Unrestricted", "Bypass")) {
    Write-Host "[WARNING] ‚ö†Ô∏è Your execution policy is '$currentPolicy'. This script may not run properly. Consider running:" -ForegroundColor Yellow
    Write-Host "Set-ExecutionPolicy RemoteSigned -Scope CurrentUser" -ForegroundColor Yellow
}

function Get-ValidatedPath {
    param(
        [string]$PromptMessage,
        [string]$DefaultPath,
        [switch]$Folder
    )
    $path = Read-Host "$PromptMessage (default: $DefaultPath)"
    if ([string]::IsNullOrWhiteSpace($path)) { $path = $DefaultPath }
    if (-not (Test-Path $path)) {
        Write-Host "[ERROR] ‚ùå The path '$path' does not exist. Exiting..." -ForegroundColor Red
        exit
    }
    return $path
}

$originalPath = Get-ValidatedPath -PromptMessage "Enter the file path for the folder you want to move" -DefaultPath $defaultOriginalPath -Folder
$moveToPath = Get-ValidatedPath -PromptMessage "Enter the destination path" -DefaultPath $defaultMoveToPath -Folder

Write-Host "[INFO] üü¢ Moving folder from '$originalPath' to '$moveToPath'..." -ForegroundColor Green
Move-Item -Path $originalPath -Destination $moveToPath -Force
Write-Host "[INFO] üü¢ Folder moved successfully!" -ForegroundColor Green

# ================================================================
# Spinner Function for Animation
# ================================================================
function Start-Spinner {
    param([int]$Duration = 5)
    $spinner = @("|", "/", "-", "\")
    $end = (Get-Date).AddSeconds($Duration)
    while ((Get-Date) -lt $end) {
        foreach ($char in $spinner) {
            Write-Host -NoNewline "`r[anim] $char" -ForegroundColor DarkBlue
            Start-Sleep -Milliseconds 100
        }
    }
    Write-Host "`r[anim] ‚úÖ Done!      " -ForegroundColor Cyan
}

# ================================================================
# Folder Operation Functions (Move, Hide, Rename, etc.)
# ================================================================
function Get-RandomFolderName {
    $names = @("sscache", "winlogs", "logfiles", "systemtemp", "backuplogs", "windowssystem", "datalogs")
    return $names | Get-Random
}

function Move-Folder {
    param(
        [string]$FolderPath,
        [string]$NewLocation
    )
    if (-not (Test-Path $FolderPath)) {
        Write-Host "[ERROR] ‚ùå Folder path '$FolderPath' does not exist. Skipping move operation." -ForegroundColor Red
        return $FolderPath
    }
    $folderName = [System.IO.Path]::GetFileName($FolderPath)
    $newFolderPath = Join-Path $NewLocation $folderName
    try {
        Move-Item -Path $FolderPath -Destination $newFolderPath -ErrorAction Stop
        Write-Host "[LOG] üìÇ Folder moved to: $newFolderPath" -ForegroundColor Green
        return $newFolderPath
    }
    catch {
        Write-Host "[ERROR] ‚ùå Failed to move folder from '$FolderPath' to '$newFolderPath'. $_" -ForegroundColor Red
        exit
    }
}

function Hide-Folder {
    param([string]$FolderPath)
    if (-not (Test-Path $FolderPath)) {
        Write-Host "[ERROR] ‚ùå Cannot hide folder. '$FolderPath' does not exist." -ForegroundColor Red
        exit
    }
    $cmd = "attrib +h +s `"$FolderPath`""
    Invoke-Expression $cmd
    Write-Host "[LOG] üîí Folder hidden: $FolderPath" -ForegroundColor DarkCyan
}

function Unhide-Folder {
    param([string]$FolderPath)
    if (-not (Test-Path $FolderPath)) {
        Write-Host "[ERROR] ‚ùå Cannot unhide folder. '$FolderPath' does not exist." -ForegroundColor Red
        exit
    }
    $cmd = "attrib -h -s `"$FolderPath`""
    Invoke-Expression $cmd
    Write-Host "[LOG] üìÇ Folder unhidden: $FolderPath" -ForegroundColor Green
}

function Rename-Folder {
    param(
        [string]$FolderPath,
        [string]$NewName
    )
    if (-not (Test-Path $FolderPath)) {
        Write-Host "[ERROR] ‚ùå Folder path '$FolderPath' does not exist for renaming. Skipping rename." -ForegroundColor Red
        return $FolderPath
    }
    $parentPath = [System.IO.Path]::GetDirectoryName($FolderPath)
    try {
        Rename-Item -Path $FolderPath -NewName $NewName -ErrorAction Stop
        $newFolderPath = Join-Path $parentPath $NewName
        Write-Host "[LOG] üîÑ Folder renamed to: $newFolderPath" -ForegroundColor Green
        return $newFolderPath
    }
    catch {
        Write-Host "[ERROR] ‚ùå Failed to rename folder '$FolderPath' to '$NewName'. $_" -ForegroundColor Red
        exit
    }
}

function Revert-All {
    param(
        [string]$FolderPath,
        [string]$OriginalFolderName,
        [string]$OriginalPath
    )
    if (-not (Test-Path $FolderPath)) {
        Write-Host "[WARN] ‚ö†Ô∏è Folder '$FolderPath' not found. It may have already been reverted. Skipping revert operations." -ForegroundColor Yellow
        return $OriginalPath
    }
    Unhide-Folder -FolderPath $FolderPath
    $FolderPath = Rename-Folder -FolderPath $FolderPath -NewName $OriginalFolderName
    $FolderPath = Move-Folder -FolderPath $FolderPath -NewLocation $OriginalPath
    Write-Host "[LOG] üîÑ Folder reverted to original state: $FolderPath" -ForegroundColor DarkYellow
    return $FolderPath
}

function Apply-Modification {
    param([string]$CurrentFolder)
    $newFolder = Move-Folder -FolderPath $CurrentFolder -NewLocation $moveToPath
    $newFolder = Rename-Folder -FolderPath $newFolder -NewName (Get-RandomFolderName)
    Hide-Folder -FolderPath $newFolder
    Write-Host "[LOG] üöÄ Folder modifications applied: $newFolder" -ForegroundColor DarkYellow
    return $newFolder
}

# ================================================================
# Initialize Folder Settings and Apply Modifications
# ================================================================
$folderPath         = $originalPath
$originalFolderName = [System.IO.Path]::GetFileName($originalPath)
$renamedFolderName  = Get-RandomFolderName
$global:modifiedState = $true

Write-Host "[LOG] üü¢ Applying initial folder modifications..." -ForegroundColor Green
Start-Spinner -Duration 3
$folderPath = Apply-Modification -CurrentFolder $folderPath
Write-Host "[LOG] ‚úÖ Folder operations complete." -ForegroundColor Green

# ================================================================
# Registry Cleanup (Optional)
# ================================================================
$regCleanupKeyInput = Read-Host "Enter the full registry key path to clean up (or press Enter to skip)"
$keywordsInput = Read-Host "Enter comma-separated keywords for registry cleanup (to scan registry entry names, optional)"
if ($keywordsInput -ne "") {
    $keywords = ($keywordsInput -split ',') | ForEach-Object { $_.Trim() }
} else {
    $keywords = @()
}

if (($regCleanupKeyInput -ne "") -and ($keywords.Count -gt 0)) {
    Write-Host "[LOG] üßπ Performing registry cleanup on key: $regCleanupKeyInput" -ForegroundColor Cyan
    Clean-RegistryKey -RegistryKey $regCleanupKeyInput -Keywords $keywords
} else {
    Write-Host "[LOG] üõë Registry cleanup skipped (no key or keywords provided)." -ForegroundColor Yellow
}

# ================================================================
# Main Monitoring Loop with Regular Key Press Toggle
# ================================================================
while ($true) {
    $inputKey = Read-Host "Press '$keyToToggle' to toggle modifications or 'Q' to quit"
    if ($inputKey -match "^[Tt]$") {
        if ($global:modifiedState) {
            Write-Host "[LOG] üîÑ Reverting changes..." -ForegroundColor Red
            Start-Spinner -Duration 2
            $folderPath = Revert-All -FolderPath $folderPath -OriginalFolderName $originalFolderName -OriginalPath $originalPath
            $global:modifiedState = $false
        }
        else {
            Write-Host "[LOG] üîÑ Re-applying modifications..." -ForegroundColor Red
            Start-Spinner -Duration 2
            $folderPath = Apply-Modification -CurrentFolder $folderPath
            $global:modifiedState = $true
        }
    }
    elseif ($inputKey -match "^[Qq]$") {
        Write-Host "üëã Exiting..." -ForegroundColor Red
        exit
    }
}
